const express = require("express");
const noteRouter = express.Router();
const { NoteModel } = require("../model/note.model");
const jwt = require("jsonwebtoken");
/**
 * @swagger
 * components:
 * schemas:
 * note:
 * type: object
 * properties:
 * id:
 * type: string
 * description: The auto-generated id of the note of user
 * title:
 * type: string
 * description: The title of the note
 * title:
 * subject: string
 * description: The subject of the note
 * * body:
 * type: string
 * description: The body of the note
 * * userID:
 * type: string
 * description: The autogenerated id of current logged in user

 */
/**
 * @swagger
 * tags:
 * name: notes
 * description: All the API routes related to User
 */
/**
 * @swagger
 * /users:
 * get:
 * summary: This will get all the notes of current logged in user
 * tags: [notes]
 * responses:
 * 200:
 * description: The list of notes of current logged in user
 * content:
 * application/json:
 * schema:
 * type: array
 * item:
 * $ref: "#/components/schemas/note"
 *
 */

noteRouter.get("/", async (req, res) => {
  const token = req.headers.authorization;
  const decoded = jwt.verify(token, "masai");
  console.log(decoded, token);
  try {
    if (decoded) {
      const notes = await NoteModel.find({ userID: decoded.userID });
      res.status(200).send(notes);
    }
  } catch (err) {
    res.status(400).send({ msg: "login error", error: err.message });
  }
});
/**
 * @swagger
 * /note/add:
 * post:
 * summary: To add new note of a user
 * tags: [note]
 * requestBody:
 * content:
 * application/json:
 * schema:
 * $ref: '#/components/schemas/note'
 * responses:
 * 200:
 * description: New note is successfully added
 * content:
 * application/json:
 * schema:
 * $ref: '#/components/schemas/note'
 * 400:
 * description: Some error occurred
 */

noteRouter.post("/add", async (req, res) => {
  try {
    const note = new NoteModel(req.body);
    await note.save();
    res.status(200).send({ msg: "A new Note has been added" });
  } catch (err) {
    res.status(400).send({ msg: err.message });
  }
});
/**
 * @swagger
 * /notes/update/{id}:
 * patch:
 * summary: It will notes details of given id
 * tags: [notes]
 * parameters:
 * - in: path
 * name: id
 * schema:
 * type: string
 * description: The note id
 * content:
 * application/json:
 * schema:
 * $ref: '#/components/schemas/note'
 * responses:
 * 200:
 * description: The note of given id has been updated
 * content:
 * application/json:
 * schema:
 * $ref: '#/components/schemas/User'
 * 400:
 * description: Some error happened
 */
noteRouter.patch("/update/:noteID", async (req, res) => {
  try {
    const id = req.params.noteID;
    await NoteModel.findByIdAndUpdate(id, req.body);
    res.status(200).send({ msg: "note is updated" });
  } catch (error) {
    res.status(400).send({ msg: "could not update the note" });
  }
});
/**
 * @swagger
 * /note/delete/{id}:
 * delete:
 * summary: Remove the note of a user by id
 * tags: [notes]
 * parameters:
 * - in: path
 * name: id
 * schema:
 * type: string
 * required: true
 * description: The user id
 *
 * responses:
 * 200:
 * description: The note was deleted
 * 400:
 * description: Some error happened
 */

noteRouter.delete("/delete/:noteID", async (req, res) => {
  try {
    const noteID = req.params.noteID;
    await NoteModel.findByIdAndRemove({ _id: noteID });
    res.status(200).send({ msg: "note is deleted" });
  } catch (error) {
    res.status(400).send({ msg: "could not delete the note" });
  }
});

module.exports = {
  noteRouter,
};
